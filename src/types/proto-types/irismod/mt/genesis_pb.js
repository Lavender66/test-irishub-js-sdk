// source: irismod/mt/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var irismod_mt_mt_pb = require('../../irismod/mt/mt_pb.js');
goog.object.extend(proto, irismod_mt_mt_pb);
goog.exportSymbol('proto.irismod.mt.Collection', null, global);
goog.exportSymbol('proto.irismod.mt.DenomBalance', null, global);
goog.exportSymbol('proto.irismod.mt.GenesisState', null, global);
goog.exportSymbol('proto.irismod.mt.Owner', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.mt.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.irismod.mt.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.irismod.mt.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.mt.GenesisState.displayName = 'proto.irismod.mt.GenesisState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.mt.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.irismod.mt.Collection.repeatedFields_, null);
};
goog.inherits(proto.irismod.mt.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.mt.Collection.displayName = 'proto.irismod.mt.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.mt.Owner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.irismod.mt.Owner.repeatedFields_, null);
};
goog.inherits(proto.irismod.mt.Owner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.mt.Owner.displayName = 'proto.irismod.mt.Owner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.mt.DenomBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.irismod.mt.DenomBalance.repeatedFields_, null);
};
goog.inherits(proto.irismod.mt.DenomBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.mt.DenomBalance.displayName = 'proto.irismod.mt.DenomBalance';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.irismod.mt.GenesisState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.mt.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.mt.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.mt.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.irismod.mt.Collection.toObject, includeInstance),
    ownersList: jspb.Message.toObjectList(msg.getOwnersList(),
    proto.irismod.mt.Owner.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.mt.GenesisState}
 */
proto.irismod.mt.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.mt.GenesisState;
  return proto.irismod.mt.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.mt.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.mt.GenesisState}
 */
proto.irismod.mt.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.irismod.mt.Collection;
      reader.readMessage(value,proto.irismod.mt.Collection.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    case 2:
      var value = new proto.irismod.mt.Owner;
      reader.readMessage(value,proto.irismod.mt.Owner.deserializeBinaryFromReader);
      msg.addOwners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.mt.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.mt.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.mt.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.irismod.mt.Collection.serializeBinaryToWriter
    );
  }
  f = message.getOwnersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.irismod.mt.Owner.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Collection collections = 1;
 * @return {!Array<!proto.irismod.mt.Collection>}
 */
proto.irismod.mt.GenesisState.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.irismod.mt.Collection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.irismod.mt.Collection, 1));
};


/**
 * @param {!Array<!proto.irismod.mt.Collection>} value
 * @return {!proto.irismod.mt.GenesisState} returns this
*/
proto.irismod.mt.GenesisState.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.irismod.mt.Collection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.irismod.mt.Collection}
 */
proto.irismod.mt.GenesisState.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.irismod.mt.Collection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.mt.GenesisState} returns this
 */
proto.irismod.mt.GenesisState.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};


/**
 * repeated Owner owners = 2;
 * @return {!Array<!proto.irismod.mt.Owner>}
 */
proto.irismod.mt.GenesisState.prototype.getOwnersList = function() {
  return /** @type{!Array<!proto.irismod.mt.Owner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.irismod.mt.Owner, 2));
};


/**
 * @param {!Array<!proto.irismod.mt.Owner>} value
 * @return {!proto.irismod.mt.GenesisState} returns this
*/
proto.irismod.mt.GenesisState.prototype.setOwnersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.irismod.mt.Owner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.irismod.mt.Owner}
 */
proto.irismod.mt.GenesisState.prototype.addOwners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.irismod.mt.Owner, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.mt.GenesisState} returns this
 */
proto.irismod.mt.GenesisState.prototype.clearOwnersList = function() {
  return this.setOwnersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.irismod.mt.Collection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.mt.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.mt.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.mt.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: (f = msg.getDenom()) && irismod_mt_mt_pb.Denom.toObject(includeInstance, f),
    mtsList: jspb.Message.toObjectList(msg.getMtsList(),
    irismod_mt_mt_pb.MT.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.mt.Collection}
 */
proto.irismod.mt.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.mt.Collection;
  return proto.irismod.mt.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.mt.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.mt.Collection}
 */
proto.irismod.mt.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new irismod_mt_mt_pb.Denom;
      reader.readMessage(value,irismod_mt_mt_pb.Denom.deserializeBinaryFromReader);
      msg.setDenom(value);
      break;
    case 2:
      var value = new irismod_mt_mt_pb.MT;
      reader.readMessage(value,irismod_mt_mt_pb.MT.deserializeBinaryFromReader);
      msg.addMts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.mt.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.mt.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.mt.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      irismod_mt_mt_pb.Denom.serializeBinaryToWriter
    );
  }
  f = message.getMtsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      irismod_mt_mt_pb.MT.serializeBinaryToWriter
    );
  }
};


/**
 * optional Denom denom = 1;
 * @return {?proto.irismod.mt.Denom}
 */
proto.irismod.mt.Collection.prototype.getDenom = function() {
  return /** @type{?proto.irismod.mt.Denom} */ (
    jspb.Message.getWrapperField(this, irismod_mt_mt_pb.Denom, 1));
};


/**
 * @param {?proto.irismod.mt.Denom|undefined} value
 * @return {!proto.irismod.mt.Collection} returns this
*/
proto.irismod.mt.Collection.prototype.setDenom = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.mt.Collection} returns this
 */
proto.irismod.mt.Collection.prototype.clearDenom = function() {
  return this.setDenom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.mt.Collection.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MT mts = 2;
 * @return {!Array<!proto.irismod.mt.MT>}
 */
proto.irismod.mt.Collection.prototype.getMtsList = function() {
  return /** @type{!Array<!proto.irismod.mt.MT>} */ (
    jspb.Message.getRepeatedWrapperField(this, irismod_mt_mt_pb.MT, 2));
};


/**
 * @param {!Array<!proto.irismod.mt.MT>} value
 * @return {!proto.irismod.mt.Collection} returns this
*/
proto.irismod.mt.Collection.prototype.setMtsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.irismod.mt.MT=} opt_value
 * @param {number=} opt_index
 * @return {!proto.irismod.mt.MT}
 */
proto.irismod.mt.Collection.prototype.addMts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.irismod.mt.MT, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.mt.Collection} returns this
 */
proto.irismod.mt.Collection.prototype.clearMtsList = function() {
  return this.setMtsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.irismod.mt.Owner.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.mt.Owner.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.mt.Owner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.mt.Owner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.Owner.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denomsList: jspb.Message.toObjectList(msg.getDenomsList(),
    proto.irismod.mt.DenomBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.mt.Owner}
 */
proto.irismod.mt.Owner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.mt.Owner;
  return proto.irismod.mt.Owner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.mt.Owner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.mt.Owner}
 */
proto.irismod.mt.Owner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.irismod.mt.DenomBalance;
      reader.readMessage(value,proto.irismod.mt.DenomBalance.deserializeBinaryFromReader);
      msg.addDenoms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.mt.Owner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.mt.Owner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.mt.Owner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.Owner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.irismod.mt.DenomBalance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.irismod.mt.Owner.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.mt.Owner} returns this
 */
proto.irismod.mt.Owner.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DenomBalance denoms = 2;
 * @return {!Array<!proto.irismod.mt.DenomBalance>}
 */
proto.irismod.mt.Owner.prototype.getDenomsList = function() {
  return /** @type{!Array<!proto.irismod.mt.DenomBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.irismod.mt.DenomBalance, 2));
};


/**
 * @param {!Array<!proto.irismod.mt.DenomBalance>} value
 * @return {!proto.irismod.mt.Owner} returns this
*/
proto.irismod.mt.Owner.prototype.setDenomsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.irismod.mt.DenomBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.irismod.mt.DenomBalance}
 */
proto.irismod.mt.Owner.prototype.addDenoms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.irismod.mt.DenomBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.mt.Owner} returns this
 */
proto.irismod.mt.Owner.prototype.clearDenomsList = function() {
  return this.setDenomsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.irismod.mt.DenomBalance.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.mt.DenomBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.mt.DenomBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.mt.DenomBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.DenomBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    denomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    irismod_mt_mt_pb.Balance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.mt.DenomBalance}
 */
proto.irismod.mt.DenomBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.mt.DenomBalance;
  return proto.irismod.mt.DenomBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.mt.DenomBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.mt.DenomBalance}
 */
proto.irismod.mt.DenomBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenomId(value);
      break;
    case 2:
      var value = new irismod_mt_mt_pb.Balance;
      reader.readMessage(value,irismod_mt_mt_pb.Balance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.mt.DenomBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.mt.DenomBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.mt.DenomBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.mt.DenomBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      irismod_mt_mt_pb.Balance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string denom_id = 1;
 * @return {string}
 */
proto.irismod.mt.DenomBalance.prototype.getDenomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.mt.DenomBalance} returns this
 */
proto.irismod.mt.DenomBalance.prototype.setDenomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Balance balances = 2;
 * @return {!Array<!proto.irismod.mt.Balance>}
 */
proto.irismod.mt.DenomBalance.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.irismod.mt.Balance>} */ (
    jspb.Message.getRepeatedWrapperField(this, irismod_mt_mt_pb.Balance, 2));
};


/**
 * @param {!Array<!proto.irismod.mt.Balance>} value
 * @return {!proto.irismod.mt.DenomBalance} returns this
*/
proto.irismod.mt.DenomBalance.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.irismod.mt.Balance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.irismod.mt.Balance}
 */
proto.irismod.mt.DenomBalance.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.irismod.mt.Balance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.mt.DenomBalance} returns this
 */
proto.irismod.mt.DenomBalance.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};


goog.object.extend(exports, proto.irismod.mt);
